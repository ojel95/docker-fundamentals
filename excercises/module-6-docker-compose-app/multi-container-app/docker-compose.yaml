version: "3.8"
services:
  mongodb:
    image: "mongo"
    # You can specify the container name if the autogenerated name is not enough.
    container_name: mongodb
    volumes:
      - data:/data/db
    # environment:
    # There are 2 syntax to define env variables. Like this:
    #   MONGO_INITDB_ROOT_USERNAME: orlando
    #   MONGO_INITDB_ROOT_PASSWORD: 1234
    # Or like this key-value pair:
      # - MONGO_INITDB_ROOT_USERNAME=orlando
    env_file:
      - ./env/mongo.env
  backend:
    # If the Dockerfile has the default name and is located in the same project dir, you can just specify the dir path.
    build: ./backend
    # In case the dockerfile has another name or other location, the image build can be more specific.
    # The context needs to be the context directory used by the Dockerfile (e.g if you copy file to the image.)
    #
    # build:
    #   context: ./backend
    #   dockerfile: Dockerfile
    #   args:
    #     some-arg: 1
    ports:
      - "2222:80"
    volumes:
      - ./backend/logs:/app/logs
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./env/backend.env
    depends_on:
      - mongodb
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src
    # This 2 options are the equivalent of -it in docker run.
    stdin_open: true
    tty: true
    depends_on:
      - backend

# Named volumes for services needs to be defined here so it's aware of them.
volumes:
  data:

